import operator
from typing import Annotated, List

from langchain_core.messages import BaseMessage
from langgraph.graph.message import add_messages
from pydantic import BaseModel
from typing_extensions import TypedDict


class AgentState(TypedDict):
    """
    The state of our agent graph. It is passed between the nodes.

    Attributes:
        messages: The list of conversation messages, managed by `add_messages`.
        tasks: List of taks to be executed, generated by the supervisor.
        results: TA list to aggregate the results of all workers.
    """

    messages: Annotated[List[BaseMessage], add_messages]
    tasks: List[str]
    results: Annotated[List[str], operator.add]


class UserRequest(BaseModel):
    message: str


class ChatResponse(BaseModel):
    response: str
